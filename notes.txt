1. Recursion -> BackTracking

When we call a function it is pushed in a stack. ( Stack Build )
When a function return in pops from a stack. ( Stack Fall )

1. Tail Recursion
2. Head Recursion
3. Linear Recursion

Questions:
    1. *****
        ****
         ***
          **
           *

    2. 1
       22
       333
       4444
       55555

    3. *
       **
       ***
       ****
       ***
       **
       *
    
    4. A
       BC
       DEF
       GHIJ

    5. 1
       10
       101
       1010

    6.   *
        * *
       * * *
      * * * *

    7.   *
        * *
       * * *
        * *
         *

    8. Armstrong bw 1-1000
    9. Prime upto 1 to N: Fill in array and then print it
    10. 1 to N factorial
    11. Fibonnaci 1 to N

BackTracking
   What?
      1. Algo Technique
      2. Recursively trying to solve a problem
      3. When we don't know from where the solution comes
   Solves?
      1. Decision Problem: What option is correct
      2. Optimisation solution: Find the best solution out of others 
      3. Enumeration solution: Find all the solutions






Array:
   1. 2 pointer approach
   2. Slide Window approach : 
      a. Has 2 pointer approach and uses concept of subarray: 
      b. Subarray is a contiguous section of an array
      c. Sliding Window can be fixed size or of dynamic size
      d. Problems:
         i. SubArray: ( Constraint Metric, Numeric Restriction )
         ii. Find longest valid SubArray
         iii. Find the no. of valid SubArray
   3. Pre computation
      a. Prefix Sum Technique
         Normal Array: 5,2,1,6,3,8
         New Array: 5,7,8
   4. Hashing
   5. Binary Search


Java Collection: java.util
   1. Framework in Java
   2. Store Data and Perform Crud Operations
   3. Prebuilt API
   4. Increased Performance
   5. Less Efforts and Code
   6. Faster Developmentr



Collection:
   1. List ( Interface )   -----> Indexing
      a. Arraylist ( Class )
      b. Vector ( Class )    ------> Sync
      c. Linked List ( Class )
   2. Queue ( Interface )  -----> FIFO
      a. Priority Queue ( Class )
      b. Array Dequeue ( Class )
   3. Set ( Interface ) -----> Unique
      a. Hash Set ( Class )
      b. LinkedHash Set ( Class ) -----> ( Ordered )
      c. Tree Set ( Class ) -----> ( Sorted )

Map: ------> ( Key, value )
   1. HashMap ------> Key unorder
   2. LinkedHash Map -------> Key Order
   3. Tree Map -------> Key Sort

